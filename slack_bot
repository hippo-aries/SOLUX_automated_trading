import time, base64, hmac, hashlib, requests, json
from slacker import Slacker

# talib 불러오기
import talib
import numpy as np

apikey = '2eaa6531162877841da4c3c62517b87c'
secret = '7b76114def75db596baf46e90e7957e3'

slack = Slacker('xoxb-1701877278516-1680953559239-DJJ61SUMk10rjGBEjWkqzn3t')

is_buy = False

# Send a message to #general channel
slack.chat.post_message('#coin', '안녕하세요! 비트코인 자동거래를 시작하겠습니다.')

# c
rsi_status = ''

trade_time = time.ctime()
'{}'.format(trade_time)

def buy_test(amount,price):
    nonce = str(time.time())
    method = 'POST'
    request_path = '/orders'
    request_body = {
        "amount": amount,
        "price": price,
        "side": "buy",
        "tradingPairName": "BTC-KRW",
        "type": "limit"
    };

    what = nonce + method + request_path + json.dumps(request_body, sort_keys=True)
    key = base64.b64decode(secret)
    signature = hmac.new(key, str(what).encode('utf-8'), hashlib.sha512)
    signature_b64 = base64.b64encode(signature.digest())

    custom_headers = {
        'API-Key': apikey,
        'Signature': signature_b64,
        'Nonce': nonce
    }

    req = requests.post(url='https://api.gopax.co.kr' + request_path, headers=custom_headers, json=request_body)
    is_buy = True
    message = '코인명 : BTC \n 변경된 포지션 : 매수 \n 거래 성공여부 : 성공 \n-\n 발생 시각 : {} \n 거래소 : Gopax \n 거래금액 : {} \n 수량 : {}'.format(trade_time, close_price_list[-1], 0.001)
    slack.chat.post_message('#coin', '코인 자동거래 알림입니다.\n\n' + message)
    print('매수')

def sell_test(amount,price):
    nonce = str(time.time())
    method = 'POST'
    request_path = '/orders'
    request_body = {
        "amount": amount,
        "price": price,
        "side": "sell",
        "tradingPairName": "BTC-KRW",
        "type": "limit"
    };

    what = nonce + method + request_path + json.dumps(request_body, sort_keys=True)
    key = base64.b64decode(secret)
    signature = hmac.new(key, str(what).encode('utf-8'), hashlib.sha512)
    signature_b64 = base64.b64encode(signature.digest())

    custom_headers = {
        'API-Key': apikey,
        'Signature': signature_b64,
        'Nonce': nonce
    }

    req = requests.post(url='https://api.gopax.co.kr' + request_path, headers=custom_headers, json=request_body)
    is_buy = False
    message = '코인명 : BTC \n 변경된 포지션 : 매도 \n 거래 성공여부 : 성공 \n-\n 발생 시각 : {} \n 거래소 : Gopax \n 거래금액 : {} \n 수량 : {}'.format(trade_time, close_price_list[-1], 0.001)
    slack.chat.post_message('#coin', '코인 자동거래 알림입니다.\n\n' + message)
    print('매도')

while True:

    now_time = round(time.time() * 1000)
    start = int(now_time)-60*60*1000*1000
    end = int(now_time)
    print(start)
    print(end)
    r = requests.get('https://api.gopax.co.kr/trading-pairs/BTC-KRW/candles?start='+str(start)+'&end='+str(end)+'&interval=30')

    arr = r.json()
    print(len(r.json()))
    close_price_list = []

    for ar in arr:
        close_price_list.append(float(ar[4]))
    close_price_list = np.array(close_price_list, dtype='f8')
    output = talib.SMA(close_price_list, timeperiod = 14)

    # rsi 계산
    rsi = talib.RSI(close_price_list,timeperiod = 14)

    if rsi[-1] < 30:
        rsi_status='low'
    elif 30<=rsi[-1]<70:
        if rsi_status == 'low'and is_buy == False:
            #buy_test(0.001, close_price_list[-1])
            print('rsi 상향 돌파!')
        if rsi_status == 'high' and is_buy == True:
            sell_test(0.001, close_price_list[-1])
            is_buy = False
            print('rsi 하향 돌파 매도!')
        rsi_status = 'middle'
    else:
        rsi_status = 'high'

    avg_min_15 = sum(close_price_list[-15:]) / 15
    avg_min_50 = sum(close_price_list[-50:]) / 50
    if avg_min_15 > avg_min_50 * 1.004 and is_buy == False:
        is_buy = True
        buy_test(0.001,close_price_list[-1])
    print(output)   
