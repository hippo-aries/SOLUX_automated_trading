import time, base64, hmac, hashlib, requests, json
import asyncio, discord

# talib 불러오기
import talib
import numpy as np

apikey = ""
secret = ""

client = discord.Client()

# 생성된 토큰을 입력해준다.
token = ""

is_buy = False

# 봇이 구동되었을 때 보여지는 코드
@client.event
async def on_ready():
    print("다음으로 로그인합니다")
    print(client.user.name)
    print(client.user.id)
    print("================")
    await client.change_presence(activity=discord.Game("비트코인 자동거래"))

rsi_status = ''

def buy(amount, price):
    trade_time = time.ctime()
    print('--------------------')
    print('봇 이름 : TradeBot \n코인명 : BTC \n변경된 포지션 : 매수 \n거래 성공여부 : 성공\n-')
    print('발생 시각 : {} \n거래소 : Gopax \n거래 금액 : {}'.format(trade_time, close_price_list[-1]))
    print('--------------------\n\n')

    # 봇이 특정 메세지를 받고 인식하는 코드
    @client.event
    async def on_message(message):
        if message.content == "!현재상황":
            embed = discord.Embed(colour=discord.Colour.red())
            embed.add_field(name="봇 이름", value="TradeBot", inline=True)
            embed.add_field(name="코인명", value="BTC", inline=True)
            embed.add_field(name="거래소", value="Gopax", inline=True)
            embed.add_field(name="거래 성공여부", value="성공", inline=True)
            embed.add_field(name="변경된 포지션", value="매수", inline=True)
            embed.add_field(name="발생 시각", value='{}'.format(trade_time), inline=False)
            embed.add_field(name="거래 금액", value='{}'.format(close_price_list[-1]), inline=False)
            await message.channel.send(embed=embed)

    client.run(token)

def sell(amount, price):
    trade_time = time.ctime()
    print('--------------------')
    print('봇 이름 : TradeBot \n코인명 : BTC \n변경된 포지션 : 매도 \n거래 성공여부 : 성공\n-')
    print('발생 시각 : {} \n거래소 : Gopax \n거래 금액 : {}'.format(trade_time, close_price_list[-1]))
    print('--------------------\n\n')

    # 봇이 특정 메세지를 받고 인식하는 코드
    @client.event
    async def on_message(message):
        if message.content == "!현재상황":
            embed = discord.Embed(colour=discord.Colour.blue())
            embed.add_field(name="봇 이름", value="TradeBot", inline=True)
            embed.add_field(name="코인명", value="BTC", inline=True)
            embed.add_field(name="거래소", value="Gopax", inline=True)
            embed.add_field(name="거래 성공여부", value="성공", inline=True)
            embed.add_field(name="변경된 포지션", value="매도", inline=True)
            embed.add_field(name="발생 시각", value='{}'.format(trade_time), inline=False)
            embed.add_field(name="거래 금액", value='{}'.format(close_price_list[-1]), inline=False)
            await message.channel.send(embed=embed)

    client.run(token)

now_time = round(time.time() * 1000)
start = int(now_time)-60*60*1000*1000
end = int(now_time)

r = requests.get('https://api.gopax.co.kr/trading-pairs/BTC-KRW/candles?start='+str(start)+'&end='+str(end)+'&interval=30')

arr = r.json()
close_price_list = []

for ar in arr:
    close_price_list.append(float(ar[4]))
    close_price_list_nparr = np.array(close_price_list, dtype='f8')
    output = talib.SMA(close_price_list_nparr)

    # rsi 계산
    rsi = talib.RSI(close_price_list_nparr,timeperiod = 14)

    if rsi[-1] < 30:
        rsi_status = 'low'
    elif 30 <= rsi[-1] < 70:
        if rsi_status == 'low' and is_buy == False:
            print('rsi 상향 돌파')
        if rsi_status == 'high' and is_buy == True:
            sell(0.001, close_price_list[-1])
            is_buy = False
        rsi_status = 'middle'
    else:
        rsi_status = 'high'

    avg_min_15 = sum(close_price_list[-15:]) / 15
    avg_min_50 = sum(close_price_list[-50:]) / 50

    if avg_min_15 > avg_min_50 * 1.004 and is_buy == False:
        is_buy = True
        buy(0.001, close_price_list[-1])

    time.sleep(5)
